Recursive-Tree-Search(x, key)
   if x = NIL or key = x.key then
     return x
   if key < x.key then
     return Recursive-Tree-Search(x.left, key)
   else
     return Recursive-Tree-Search(x.right, key)
   end if

function recursiveTreeCreate(n){
let treeCount = 0;

*****function helper(i,n){
let stackAsc = [];
let toPushAsc=1;
while(toPushAsc < n){
if(toPushAsc !== i) stackAsc.push(toPush);
toPushAsc = toPushAsc + 1;
}

let root = new Node(i)
let current = root;
while(stackAsc.length){

let next = stackAsc.pop();

if(next < current.val) {
current.left = next;
current = current.left;}
if(next > current.val) {
current.right = next;
current = current.right}
}
treeCount = treeCount + 1

let stackDesc = [];
let toPushDesc=n;
while(toPushDesc > 0){
if(toPushDesc !== i) stackDesc.push(toPush);
toPushDesc = toPushDesc - 1;
}

while(stackDesc.length){

let next = stackDesc.pop();

if(next < current.val) {
current.left = next;
current = current.left;}
if(next > current.val) {
current.right = next;
current = current.right}
}
treeCount = treeCount + 1




}

*********
