n = 3
how many unique trees can you create with nodes that go from 1 to 3

its some kind of recursion or loop
start with 1 as the root
1 will have nothing on the left, then 2 on the right, then every other number up until n on the right
2 wiill then be the root and have 1 on the left

'current' should be 1 at first, and have a recursive function that creates a binary tree, then increment current
**problem** how does your recursion



function createTrees(n){
let currentMasterRoot = 1;
let currentMasterInt = 1;
let treeCount = 0;


while(currentMasterRoot <= n){

while(currentMasterInt <= n){
if(currentMasterInt !== currentMasterRoot){
createSingleTree(n, currentMasterInt, currentMasterRoot);
treeCount = treeCount + 1;
}
currentMasterInt = currentMasterInt+ 1;
}
currentMasterRoot=currentMasterRoot+1;
currentMasterInt = 1;
}




function createSingleTree(n, currentInt, currentRoot){
let stack = [];

if(currentInt-currentRoot >1){
let toPush = currentInt-1;
while(toPush < n){
stack.push(toPush);
toPush=toPush+1;
}}
if(currentRoot > 1){
let toPush =1;
while(toPush < currentRoot){
stack.push(toPush);
toPush=toPush+1;
}}



let root = new Node(currentRoot)
let currentNode = root
while(currentInt <= n){

if(currentInt < currentNode.val && currentInt !== currentRoot) {
currentNode.left = new Node(currentInt);
currentNode = currentNode.left;
currentInt = currentInt+1;}

if(currentInt > currentNode.val && currentInt !== currentRoot){ 
currentNode.right = new Node(currentInt);
currentNode = currentNode.right;
currentInt = currentInt + 1;
}
console.log(currentInt)
}

while(stack.length){
currentInt = stack.pop()
if(currentInt < currentNode.val && currentInt !== currentRoot) {
currentNode.left = new Node(currentInt);
currentNode = currentNode.left;
currentInt = currentInt+1;}

if(currentInt > currentNode.val && currentInt !== currentRoot){ 
currentNode.right = new Node(currentInt);
currentNode = currentNode.right;
currentInt = currentInt + 1;
}
console.log(currentInt)
}


}



